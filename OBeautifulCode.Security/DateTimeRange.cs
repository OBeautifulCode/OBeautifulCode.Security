// --------------------------------------------------------------------------------------------------------------------
// <copyright file="DateTimeRange.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Security source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Security
{
    using System;

    /// <summary>
    /// Represents a range of <see cref="DateTime"/>.
    /// </summary>
#if !OBeautifulCodeSecurityRecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Security", "See package version number")]
#endif
    internal class DateTimeRange
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DateTimeRange"/> class.
        /// </summary>
        /// <param name="startDateTimeInUtc">The start of the range in UTC.</param>
        /// <param name="endDateTimeInUtc">The end of the range in UTC.</param>
        /// <exception cref="ArgumentException"><paramref name="startDateTimeInUtc"/> is not <see cref="DateTimeKind.Utc"/></exception>
        /// <exception cref="ArgumentException"><paramref name="endDateTimeInUtc"/> is not <see cref="DateTimeKind.Utc"/></exception>
        /// <exception cref="ArgumentOutOfRangeException"><paramref name="startDateTimeInUtc"/> is greater than or equal to <paramref name="endDateTimeInUtc"/></exception>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1305:SpecifyIFormatProvider", MessageId = "System.String.Format(System.String,System.Object,System.Object)", Justification = "Like the convenience of interpolated strings")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1305:SpecifyIFormatProvider", MessageId = "System.String.Format(System.String,System.Object,System.Object,System.Object)", Justification = "Like the convenience of interpolated strings")]
        public DateTimeRange(
            DateTime startDateTimeInUtc,
            DateTime endDateTimeInUtc)
        {
            if (startDateTimeInUtc.Kind != DateTimeKind.Utc)
            {
                throw new ArgumentException($"{nameof(startDateTimeInUtc)} {nameof(DateTimeKind)} is not {nameof(DateTimeKind.Utc)}", nameof(startDateTimeInUtc));
            }

            if (endDateTimeInUtc.Kind != DateTimeKind.Utc)
            {
                throw new ArgumentException($"{nameof(endDateTimeInUtc)} {nameof(DateTimeKind)} is not {nameof(DateTimeKind.Utc)}", nameof(endDateTimeInUtc));
            }

            if (startDateTimeInUtc >= endDateTimeInUtc)
            {
                throw new ArgumentOutOfRangeException($"{nameof(startDateTimeInUtc)} is >= {nameof(endDateTimeInUtc)}");
            }

            this.StartDateTimeInUtc = startDateTimeInUtc;
            this.EndDateTimeInUtc = endDateTimeInUtc;
        }

        /// <summary>
        /// Gets the start of the range in UTC.
        /// </summary>
        public DateTime StartDateTimeInUtc { get; }

        /// <summary>
        /// Gets the end of the range in UTC.
        /// </summary>
        public DateTime EndDateTimeInUtc { get; }
    }
}
