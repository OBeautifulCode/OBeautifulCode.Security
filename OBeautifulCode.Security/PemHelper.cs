// --------------------------------------------------------------------------------------------------------------------
// <copyright file="PemHelper.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Security source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Security
{
    using System;
    using System.Globalization;
    using System.IO;
    using System.Text;

    using Org.BouncyCastle.Crypto;
    using Org.BouncyCastle.OpenSsl;
    using Org.BouncyCastle.Pkcs;

    using Spritely.Recipes;

    /// <summary>
    /// Contains helper methods for creating PEM encoded data.
    /// </summary>
#if !OBeautifulCodeSecurityRecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Security", "See package version number")]
#endif
    internal static class PemHelper
    {
        /// <summary>
        /// Encodes a certificate signing request in PEM.
        /// </summary>
        /// <param name="csr">The certificate signing request.</param>
        /// <returns>
        /// The certificate signing request encoded in PEM.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="csr"/> is null.</exception>
        public static string AsPemEncodedString(
            this Pkcs10CertificationRequest csr)
        {
            new { csr }.Must().NotBeNull().OrThrow();

            var result = EncodeAsPem(csr);
            return result;
        }

        /// <summary>
        /// Encodes the private key of an asymmetric key pair in PEM.
        /// </summary>
        /// <param name="keyPair">The asymmetric cipher key pair.</param>
        /// <returns>
        /// The asymmetric key pair's private key encoded in PEM.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="keyPair"/> is null.</exception>
        public static string AsPemEncodedString(
            this AsymmetricCipherKeyPair keyPair)
        {
            new { keyPair }.Must().NotBeNull().OrThrow();

            var result = EncodeAsPem(keyPair);
            return result;
        }

        /// <summary>
        /// Encodes an asymmetric key in PEM.
        /// </summary>
        /// <param name="key">The asymmetric key.</param>
        /// <returns>
        /// The asymmetric key encoded in PEM.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="key"/> is null.</exception>
        public static string AsPemEncodedString(
            this AsymmetricKeyParameter key)
        {
            new { key }.Must().NotBeNull().OrThrow();

            var result = EncodeAsPem(key);
            return result;
        }

        private static string EncodeAsPem(
            object item)
        {
            new { item }.Must().NotBeNull().OrThrow();

            string result;
            var stringBuilder = new StringBuilder();
            using (var stringWriter = new StringWriter(stringBuilder, CultureInfo.InvariantCulture))
            {
                var pemWriter = new PemWriter(stringWriter);
                pemWriter.WriteObject(item);
                pemWriter.Writer.Flush();

                result = stringBuilder.ToString();
            }
                
            return result;
        }
    }
}
